// This file is autogenerated. Do not modify
package controllers

import (
	"errors"
	"io"
	"log"
	"net/http"

	"github.com/ANISH-GOTTAPU/goopentestbed"
	"github.com/ANISH-GOTTAPU/goopentestbed/httpapi"
	"github.com/ANISH-GOTTAPU/goopentestbed/httpapi/interfaces"
	"google.golang.org/protobuf/encoding/protojson"
)

type testbedController struct {
	handler interfaces.TestbedHandler
}

func NewHttpTestbedController(handler interfaces.TestbedHandler) interfaces.TestbedController {
	return &testbedController{handler}
}

func (ctrl *testbedController) Routes() []httpapi.Route {
	return []httpapi.Route{
		{Path: "/testbed", Method: "POST", Name: "Reserve", Handler: ctrl.Reserve},
		{Path: "/release", Method: "POST", Name: "Release", Handler: ctrl.Release},
	}
}

func (ctrl *testbedController) Reserve(w http.ResponseWriter, r *http.Request) {
	var item goopentestbed.Testbed
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = goopentestbed.NewTestbed()
			err := item.Unmarshal().FromJson(string(body))
			if err != nil {
				ctrl.responseSetReserveError(w, "validation", err)
				return
			}
		} else {
			ctrl.responseSetReserveError(w, "validation", readError)
			return
		}
	} else {
		bodyError := errors.New("Request does not have a body")
		ctrl.responseSetReserveError(w, "validation", bodyError)
		return
	}
	result, err := ctrl.handler.Reserve(item, r)
	if err != nil {
		ctrl.responseSetReserveError(w, "internal", err)
		return
	}

	if result.HasYieldResponse() {

		proto, err := result.YieldResponse().Marshal().ToProto()
		if err != nil {
			ctrl.responseSetReserveError(w, "validation", err)
		}
		data, err := configurationMrlOpts.Marshal(proto)
		if err != nil {
			ctrl.responseSetReserveError(w, "validation", err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	ctrl.responseSetReserveError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *testbedController) responseSetReserveError(w http.ResponseWriter, errorKind goopentestbed.ErrorKindEnum, rsp_err error) {
	var result goopentestbed.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(goopentestbed.Error); ok {
		result = rErr
	} else {
		result = goopentestbed.NewError()
		err := result.Unmarshal().FromJson(rsp_err.Error())
		if err != nil {
			_ = result.SetCode(statusCode)
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			_ = result.SetErrors([]string{rsp_err.Error()})
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result.Marshal()); err != nil {
		log.Print(err.Error())
	}
}

func (ctrl *testbedController) Release(w http.ResponseWriter, r *http.Request) {
	var item goopentestbed.ReleaseTestbed
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = goopentestbed.NewReleaseTestbed()
			err := item.Unmarshal().FromJson(string(body))
			if err != nil {
				ctrl.responseSetReleaseError(w, "validation", err)
				return
			}
		} else {
			ctrl.responseSetReleaseError(w, "validation", readError)
			return
		}
	} else {
		bodyError := errors.New("Request does not have a body")
		ctrl.responseSetReserveError(w, "validation", bodyError)
		return
	}
	result, err := ctrl.handler.Release(item, r)
	if err != nil {
		ctrl.responseSetReserveError(w, "internal", err)
		return
	}

	if result.HasWarning() {

		proto, err := result.Warning().Marshal().ToProto()
		if err != nil {
			ctrl.responseSetReserveError(w, "validation", err)
		}
		data, err := configurationMrlOpts.Marshal(proto)
		if err != nil {
			ctrl.responseSetReserveError(w, "validation", err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	ctrl.responseSetReserveError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *testbedController) responseSetReleaseError(w http.ResponseWriter, errorKind goopentestbed.ErrorKindEnum, rsp_err error) {
	var result goopentestbed.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(goopentestbed.Error); ok {
		result = rErr
	} else {
		result = goopentestbed.NewError()
		err := result.Unmarshal().FromJson(rsp_err.Error())
		if err != nil {
			_ = result.SetCode(statusCode)
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			_ = result.SetErrors([]string{rsp_err.Error()})
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result.Marshal()); err != nil {
		log.Print(err.Error())
	}
}

var configurationMrlOpts = protojson.MarshalOptions{
	UseProtoNames:   true,
	AllowPartial:    true,
	EmitUnpopulated: true,
	Indent:          "  ",
}
